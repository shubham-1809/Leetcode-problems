class Solution {
    vector<string> bruteForce(vector<int>& target, int &n){
        vector<string> ans;
        stack<int> st;
        int size = target.size(), index = 0;

        for(int num = 1; num <= n; num++){
            st.push(num);
            ans.push_back("Push");
            if(st.top() == target[index]){
                index++;
                if(index == size) return ans;
            }
            else{
                st.pop();
                ans.push_back("Pop");
            }
        }
        return ans;
    }
    vector<string> optimal(vector<int>& target, int &n){
        vector<string> ans;
        int size = target.size(), index = 0;

        for(int num = 1; num <= n; num++){
            ans.push_back("Push");
            if(num == target[index]){
                index++;
                if(index == size) return ans;
            }
            else ans.push_back("Pop");
        }
        return ans;
    }
public:
    vector<string> buildArray(vector<int>& target, int n) {
        //return bruteForce(target, n);
        return optimal(target, n);
    }
};