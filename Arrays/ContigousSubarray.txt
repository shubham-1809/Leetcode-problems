class Solution {
    int bruteForce(vector<int>& nums){
        int size = nums.size(), first = 0, second, maxLen = 0, cntZero, cntOne;

        for(; first < size; first++){
            cntZero = cntOne = 0;
            for(second = first; second < size; second++){
                if(nums[second] == 0) cntZero++;
                else cntOne++;
                maxLen = max(maxLen, cntZero == cntOne ? second - first + 1 : 0);
            }
        }
        return maxLen;
    }
    int optimal(vector<int> &nums){
        int n = nums.size();
        unordered_map<int, int> mp;
        int sum = 0;
        int subArray_length = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i] == 0 ? -1 : 1; 
            if (sum == 0) {
                subArray_length = i + 1;
            } else if (mp.find(sum) != mp.end()) {
                subArray_length = max(subArray_length, i - mp[sum]);
            } else {
                mp[sum] = i;
            }
        }
        return subArray_length;
    }
public:
    int findMaxLength(vector<int>& nums) {
        //return bruteForce(nums);
        return optimal(nums);
    }
};