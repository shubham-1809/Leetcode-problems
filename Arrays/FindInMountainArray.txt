/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
    int getPeakInd(MountainArray &mountainArr, int size){
        int left = 0, right = size - 1, mid;

        while(left <= right){
            mid = left + (right - left) / 2;
            if(mountainArr.get(mid) < mountainArr.get(mid + 1)) left = mid + 1;
            else right = mid - 1;
        }
        return left;
    }
    int binarySearch(int start, int end, MountainArray &mountainArr, int &target){
        int mid;

        while(start <= end){
            mid = start + (end - start) / 2;
            if(mountainArr.get(mid) == target) return mid;
            else if(mountainArr.get(mid) < target) start = mid + 1;
            else end = mid - 1;
        }
        return -1;
    }
    int reverseBinarySearch(int start, int end, MountainArray &mountainArr, int &target){
        int mid;

        while(start <= end){
            mid = start + (end - start) / 2;
            if(mountainArr.get(mid) == target) return mid;
            else if(mountainArr.get(mid) < target) end = mid - 1;
            else start = mid + 1;
        }
        return -1;
    }
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int size = mountainArr.length();

        int peakInd = getPeakInd(mountainArr, size);
        int minInd = binarySearch(0, peakInd, mountainArr, target);
        if(minInd != -1) return minInd;
        return reverseBinarySearch(peakInd + 1, size - 1, mountainArr, target);
    }
};