/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* storeAllParent(TreeNode* root, int target, unordered_map<TreeNode*, TreeNode*> &parentMapping){
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* targetNode;
        parentMapping[root] = NULL;
        
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(node -> val == target) targetNode = node;
            if(node -> left){
                q.push(node -> left);
                parentMapping[node -> left] = node;
            }
            if(node -> right){
                q.push(node -> right);
                parentMapping[node -> right] = node;
            }
        }
        return targetNode;
    }   
    int bfs(TreeNode* root, int &start) {
        unordered_map<TreeNode*, TreeNode*> parentMapping;
        TreeNode* targetNode = storeAllParent(root, start, parentMapping);
        queue<TreeNode*> q;
        q.push(targetNode);
        unordered_map<TreeNode*, bool> vis;
        vis[targetNode] = true;
        int amountOfTime = 0;
        bool flag = false;

        while(!q.empty()){
            int size = q.size();
            for(int ind = 0; ind < size; ind++){
                TreeNode* currNode = q.front();
                q.pop();
                if(currNode -> left && !vis[currNode -> left]){
                    q.push(currNode -> left);
                    vis[currNode -> left] = true;
                    flag = true;
                }
                if(currNode -> right && !vis[currNode -> right]){
                    q.push(currNode -> right);
                    vis[currNode -> right] = true;
                    flag = true;
                }
                if(parentMapping[currNode] && !vis[parentMapping[currNode]]){
                    q.push(parentMapping[currNode]);
                    vis[parentMapping[currNode]] = true;
                    flag = true;
                }
            }
            if(flag){
                amountOfTime++;
                flag = !flag;
            }
        }
        return amountOfTime;
    }
    int dfs(TreeNode* root, int &start, int &result){
        if(!root) return 0;

        int leftHeight = dfs(root -> left, start, result);
        int rightHeight = dfs(root -> right, start, result);

        if(root -> val == start){
            result = max(leftHeight, rightHeight);
            return -1;
        }
        else if(leftHeight >= 0 && rightHeight >= 0){
            return 1 + max(leftHeight, rightHeight);
        }
        else{
            result = max(result, abs(leftHeight) + abs(rightHeight));
            return min(leftHeight, rightHeight) - 1;
        }
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        //return bfs(root, start);
        int result = INT_MIN;
        dfs(root, start, result); // dfs here is more optimal than bfs in terms of time and space complexity
        return result; // entire logic is based around finding the farthest leave node from the the start node
    }
};