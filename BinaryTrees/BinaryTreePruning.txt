/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool isOnePresent(TreeNode *node){
        if(!node) return false;
        if(node -> val == 1) return true;

        return isOnePresent(node -> left) || isOnePresent(node -> right);
    }
    TreeNode *bruteForce(TreeNode *root){
        if(!root) return NULL;

        if(!isOnePresent(root -> left)) root -> left = NULL;
        if(!isOnePresent(root -> right)) root -> right = NULL;

        root -> left = bruteForce(root -> left);
        root -> right = bruteForce(root -> right);

        if(!root -> left && !root -> right && root -> val == 0) return NULL;
        return root;
    }
    TreeNode *optimal(TreeNode *root){
        if(!root) return NULL;

        root -> left = optimal(root -> left);
        root -> right = optimal(root -> right);

        if(!root -> left && !root -> right && root -> val == 0) return NULL;
        return root;
    }
public:
    TreeNode* pruneTree(TreeNode* root) {
        //return bruteForce(root);
        return optimal(root);
    }
};