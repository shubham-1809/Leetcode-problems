/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int getTotSum(TreeNode *root, int &cnt){
        if(!root) return 0;

        cnt++;
        int leftSum = getTotSum(root -> left, cnt);
        int rightSum = getTotSum(root -> right, cnt);
        return leftSum + rightSum + root -> val;
    }
    void bruteForce(TreeNode *root, int &cntNodes){
        if(!root) return;

        int cnt = 0;
        int totSum = getTotSum(root, cnt);
        if(totSum / cnt == root -> val) cntNodes++;

        bruteForce(root -> left, cntNodes);
        bruteForce(root -> right, cntNodes);
    }
    pair<int, int> optimal(TreeNode *root, int &cntNodes){
        if(!root) return {0, 0};

        auto left = optimal(root -> left, cntNodes);
        auto right = optimal(root -> right, cntNodes);
        if((left.first + right.first + root -> val) / (left.second + right.second + 1) == root -> val) cntNodes++;
        return {left.first + right.first + root -> val, left.second + right.second + 1};
    }
public:
    int averageOfSubtree(TreeNode* root) {
        int cntNodes = 0;
        //bruteForce(root, cntNodes);
        optimal(root, cntNodes);
        return cntNodes;
    }
};