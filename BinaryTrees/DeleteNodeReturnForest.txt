/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* callDfs(TreeNode *root, unordered_set<int> &hashSet, vector<TreeNode*> &ans){
        if(!root) return NULL;

        root -> left = callDfs(root -> left, hashSet, ans);
        root -> right = callDfs(root -> right, hashSet, ans);
        if(hashSet.find(root -> val) != hashSet.end()){
            if(root -> left) ans.push_back(root -> left);
            if(root -> right) ans.push_back(root -> right);
            return NULL;
        }
        return root;
    }
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> ans;
        unordered_set<int> hashSet(to_delete.begin(), to_delete.end());

        callDfs(root, hashSet, ans);
        if(hashSet.find(root -> val) == hashSet.end()) ans.push_back(root);
        return ans;
    }
};