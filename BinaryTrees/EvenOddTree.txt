/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool levelOrderTraversal(TreeNode* root){
        bool level = true;
        int prev = -1;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();
            while(size--){
                TreeNode* frontNode = q.front();
                q.pop();
                // even level
                if(level){
                    if(prev >= frontNode -> val || frontNode -> val % 2 == 0) return false;
                }
                // odd level
                else{
                    if(prev <= frontNode -> val || frontNode -> val % 2 == 1) return false;
                }
                if(frontNode -> left) q.push(frontNode -> left);
                if(frontNode -> right) q.push(frontNode -> right);
                prev = frontNode -> val;
            }
            level = !level;
            level == false ? prev = 1e7 : prev = -1;
        }
        return true;
    }
public:
    bool isEvenOddTree(TreeNode* root) {
        return levelOrderTraversal(root);
    }
};