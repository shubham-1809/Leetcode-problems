/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void recursion(TreeNode* root, int currLevel, int &maxLevel, int &leftVal){
        if(!root) return;
        if(currLevel > maxLevel){
            maxLevel = currLevel;
            leftVal = root -> val;
        }

        recursion(root -> left, currLevel + 1, maxLevel, leftVal);
        recursion(root -> right, currLevel + 1, maxLevel, leftVal);
    }
    int bfs(TreeNode* root){
        queue<TreeNode*> q;
        int currLevel = 0, maxLevel = -1, leftVal;
        q.push(root);

        while(!q.empty()){
            TreeNode* frontNode = q.front();
            q.pop();

            if(currLevel > maxLevel){
                maxLevel = currLevel;
                leftVal = frontNode -> val;
            }
            if(frontNode -> right){
                q.push(frontNode -> right);
            }
            if(frontNode -> left){
                q.push(frontNode -> left);
            }
            currLevel++;
        }
        return leftVal;
    }
public:
    int findBottomLeftValue(TreeNode* root) {
        //int maxLevel = -1, leftVal;
        //recursion(root, 0, maxLevel, leftVal);
        //return leftVal;
        return bfs(root);
    }
};