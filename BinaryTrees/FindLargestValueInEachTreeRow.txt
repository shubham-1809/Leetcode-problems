/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> levelOrder(TreeNode *root){
        vector<int> ans;
        if(!root) return ans;

        int maxVal, size;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            size = q.size();
            maxVal = INT_MIN;
            while(size--){
                TreeNode *frontNode = q.front();
                q.pop();
                if(maxVal < frontNode -> val) maxVal = frontNode -> val;
                if(frontNode -> left) q.push(frontNode -> left);
                if(frontNode -> right) q.push(frontNode -> right);
            }
            ans.push_back(maxVal);
        }
        return ans;
    }
    void dfs(TreeNode *root, int depth, vector<int> &ans){
        if(!root) return;

        if(ans.size() == depth) ans.push_back(root -> val);
        else ans[depth] = max(ans[depth], root -> val);

        dfs(root -> left, depth + 1, ans);
        dfs(root -> right, depth + 1, ans);
    }
public:
    vector<int> largestValues(TreeNode* root) {
        //return levelOrder(root);
        vector<int> ans;
        dfs(root, 0, ans);
        return ans;
    }
};