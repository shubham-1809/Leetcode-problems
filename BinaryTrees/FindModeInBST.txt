/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void bruteForce_recursion(TreeNode *root, unordered_map<int, int> &hashMap){
        if(!root) return;

        bruteForce_recursion(root -> left, hashMap);
        hashMap[root -> val]++;
        bruteForce_recursion(root -> right, hashMap);
    }
    vector<int> bruteForce(TreeNode *root){
        vector<int> mode;
        unordered_map<int, int> hashMap;
        bruteForce_recursion(root, hashMap);
        int maxFreq = INT_MIN;
        for(auto &it : hashMap) maxFreq = max(maxFreq, it.second);
        for(auto &it : hashMap){
            if(maxFreq == it.second) mode.push_back(it.first);
        }
        return mode;
    }
    void optimal_recursion(TreeNode *root, int &currNum, int &currFreq, int &maxFreq, vector<int> &mode){
        if(!root) return;

        optimal_recursion(root -> left, currNum, currFreq, maxFreq, mode);
        if(currNum == root -> val) currFreq++;
        else{
            currNum = root -> val;
            currFreq = 1;
        }
        if(currFreq > maxFreq){
            maxFreq = currFreq;
            mode = {};
        }
        if(currFreq == maxFreq) mode.push_back(root -> val);
        optimal_recursion(root -> right, currNum, currFreq, maxFreq, mode);
    }
    vector<int> optimal(TreeNode *root){
        vector<int> mode;
        int currNum = 0, currFreq = 0, maxFreq = 0;
        optimal_recursion(root, currNum, currFreq, maxFreq, mode);
        return mode;
    }
public:
    vector<int> findMode(TreeNode* root) {
        //return bruteForce(root);
        return optimal(root);
    }
};