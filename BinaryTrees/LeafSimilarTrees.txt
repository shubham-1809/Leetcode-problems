/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void callDfs(TreeNode *root, string &str){
        if(!root) return;
        if(!root -> left && !root -> right){
            str += to_string(root -> val) + '#';
            return;
        }

        callDfs(root -> left, str);
        callDfs(root -> right, str);
    }
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        string str1 = "", str2 = "";   // we can also take two vectors but it wil take more space

        callDfs(root1, str1);
        callDfs(root2, str2);
        return str1 == str2;
    }
};