/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void bruteForceUtil(TreeNode *root, TreeNode *child, int &diff){
        if(!root || !child) return;

        diff = max(diff, abs(root -> val - child -> val));
        bruteForceUtil(root, child -> left, diff);
        bruteForceUtil(root, child -> right, diff);
    }
    void bruteForce(TreeNode *root, int &diff){
        if(!root) return;

        bruteForceUtil(root, root -> left, diff);
        bruteForceUtil(root, root -> right, diff);

        bruteForce(root -> left, diff);
        bruteForce(root -> right, diff);
    }
    void optimal(TreeNode *root, int minVal, int maxVal, int &diff){
        if(!root) return;

        minVal = min(minVal, root -> val);
        maxVal = max(maxVal, root -> val);
        optimal(root -> left, minVal, maxVal, diff);
        optimal(root -> right, minVal, maxVal, diff);

        diff = max(diff, abs(maxVal - minVal));
    }
public:
    int maxAncestorDiff(TreeNode* root) {
        int diff = INT_MIN;
        //bruteForce(root, diff);
        optimal(root, root -> val, root -> val, diff);
        return diff;
    }
};