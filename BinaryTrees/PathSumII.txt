/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result; 
        vector<int> path;
        dfs(root, targetSum, result, path);
        return result;
    }

private:
    void dfs(TreeNode* root, int targetSum, vector<vector<int>>& result, vector<int>& path) {
        if (!root) return; 
        path.emplace_back(root->val);
        // Has to be a leaf node 
        if (targetSum == root->val && !root->left && !root->right)
            result.emplace_back(path);
        if (root->left)
            dfs(root->left, targetSum - root->val, result, path);
        if (root->right)
            dfs(root->right, targetSum - root->val, result, path);
        path.pop_back();
    }
};