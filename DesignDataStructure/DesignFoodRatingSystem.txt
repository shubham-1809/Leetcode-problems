class FoodRatings {
    unordered_map<string, int> foodToRating;
    unordered_map<string, string> foodToCuisine;
    unordered_map<string, set<pair<int, string>>> cuisineToFoodRating;
public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        int size = foods.size();

        for(int ind = 0; ind < size; ind++){
            string food = foods[ind];
            string cuisine = cuisines[ind];
            int rating = ratings[ind];

            foodToRating[food] = rating;
            foodToCuisine[food] = cuisine;
            cuisineToFoodRating[cuisine].insert({-rating, food});
        }
    }
    
    void changeRating(string food, int newRating) {
        int oldRating = foodToRating[food];
        string cuisine = foodToCuisine[food];
        foodToRating[food] = newRating;
        cuisineToFoodRating[cuisine].erase({-oldRating, food});
        cuisineToFoodRating[cuisine].insert({-newRating, food});
    }
    
    string highestRated(string cuisine) {
        return cuisineToFoodRating[cuisine].begin() -> second;
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */