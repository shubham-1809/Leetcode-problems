class Solution {
    int recursion(int n, int cell, vector<vector<int>> &adj, vector<vector<int>> &dp, int &mod){
        if(n == 0) return 1;
        if(dp[n][cell] != -1) return dp[n][cell];

        int result = 0;
        for(auto &nextCell : adj[cell]){
            result = (result + recursion(n - 1, nextCell, adj, dp, mod)) % mod;
        }
        return dp[n][cell] = result;
    }
public:
    int knightDialer(int n) {
        vector<vector<int>> adj = {
            {4, 6}, {6, 8}, {7, 9}, {4, 8}, {0, 3, 9}, {}, {0, 1, 7}, {2, 6}, {1, 3}, {2,4}
        };
        vector<vector<int>> dp(n, vector<int>(10, -1));

        int result = 0, mod = 1e9 + 7;
        for(int cell = 0; cell <= 9; cell++){
            result = (result + recursion(n - 1, cell, adj, dp, mod)) % mod;
        }
        return result;
    }
};