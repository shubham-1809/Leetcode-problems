class Solution {
private:
    int recursion(string &s1, string &s2, int ind1, int ind2){
        if(ind1 < 0 || ind2 < 0) return 0;
        if(s1[ind1] == s2[ind2])
            return 1 + recursion(s1,s2,ind1-1,ind2-1);
        else 
            return 0 + max(recursion(s1,s2,ind1,ind2-1),recursion(s1,s2,ind1-1,ind2));  
    }  
    int memoize(string &s1, string &s2, int ind1, int ind2, vector<vector<int>> &dp){
        if(ind1 < 0 || ind2 < 0) return 0;
        if(dp[ind1][ind2] != -1) return dp[ind1][ind2];

        if(s1[ind1] == s2[ind2])
            return dp[ind1][ind2] = 1 + memoize(s1,s2,ind1-1,ind2-1, dp);
        else 
            return dp[ind1][ind2] = 0 + max(memoize(s1,s2,ind1,ind2-1, dp),memoize(s1,s2,ind1-1,ind2, dp));  
    } 
    int tabulation(int n, int m, string &s1, string &s2){
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        
        for(int ind1 = 1; ind1 <= n; ind1++){
            for(int ind2 = 1; ind2 <= m; ind2++){
                if(s1[ind1 - 1] == s2[ind2 - 1]) 
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
                else 
                    dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
            }
        }
        return dp[n][m];
    }
    int spaceOptimization(int n, int m, string &s1, string &s2){
        vector<int> prev(m + 1, 0), curr(m + 1, 0);
        
        for(int ind1 = 1; ind1 <= n; ind1++){
            for(int ind2 = 1; ind2 <= m; ind2++){
                if(s1[ind1 - 1] == s2[ind2 - 1]) 
                    curr[ind2] = 1 + prev[ind2 - 1];
                else 
                    curr[ind2] = max(prev[ind2], curr[ind2 - 1]);
            }
            prev = curr;
        }
        return prev[m];
    } 
public:
    int longestCommonSubsequence(string text1, string text2) {
        int size1 = text1.size(), size2 = text2.size();
        //return recursion(text1, text2, size1-1, size2-1);
        //vector<vector<int>> dp(size1, vector<int>(size2, -1));
        //return memoize(text1, text2, size1-1,size2-1, dp);
        //return tabulation(size1, size2, text1, text2);
        return spaceOptimization(size1, size2, text1, text2);
    }
};