class Solution {
    int recursion(vector<int>& jobDifficulty, int &size, int ind, int d){
        if(d == 1){
            int maxDiff = INT_MIN;
            for(int idx = ind; idx < size; idx++) maxDiff = max(maxDiff, jobDifficulty[idx]);
            return maxDiff;
        }
        int maxDiff = jobDifficulty[ind], ans = INT_MAX;

        for(int idx = ind; idx <= size - d; idx++){
            maxDiff = max(maxDiff, jobDifficulty[idx]);
            ans = min(ans, maxDiff + recursion(jobDifficulty, size, idx + 1, d - 1));
        }
        return ans;
    }
    int memoize(vector<int>& jobDifficulty, int &size, int ind, int d, vector<vector<int>> &dp){
        if(d == 1){
            int maxDiff = INT_MIN;
            for(int idx = ind; idx < size; idx++) maxDiff = max(maxDiff, jobDifficulty[idx]);
            return maxDiff;
        }
        if(dp[ind][d] != -1) return dp[ind][d];

        int maxDiff = jobDifficulty[ind], ans = INT_MAX;

        for(int idx = ind; idx <= size - d; idx++){
            maxDiff = max(maxDiff, jobDifficulty[idx]);
            ans = min(ans, maxDiff + memoize(jobDifficulty, size, idx + 1, d - 1, dp));
        }
        return dp[ind][d] = ans;
    }
public:
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int size = jobDifficulty.size();
        if(size < d) return -1;

        //return recursion(jobDifficulty, size, 0, d);
        //vector<vector<int>> dp(size + 1, vector<int>(d + 1, -1));
        return memoize(jobDifficulty, size, 0, d, dp);
    }
};