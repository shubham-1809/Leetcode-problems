class Solution {
    void callDfs(int num, int n, int &k, vector<int> &result){
        if(n <= 0){
            result.push_back(num);
            return;
        }
        int lastDigit = num % 10;
        if(lastDigit + k <= 9) callDfs(num * 10 + lastDigit + k, n - 1, k, result);
        if(k != 0 && lastDigit - k >= 0) callDfs(num * 10 + lastDigit - k, n - 1, k, result);
    }
    void callBfs(int &n, int &k, vector<int> &result){
        queue<int> q;
        for(int num = 1; num <= 9; num++) q.push(num);
        int level = 1;

        while(!q.empty() && level < n){
            int size = q.size();
            level++;
            for(int siz = 1; siz <= size; siz++){
                int frontVal = q.front();
                q.pop();

                int lastDigit = frontVal % 10;
                if(lastDigit + k <= 9) q.push(frontVal * 10 + lastDigit + k);
                if(k != 0 && lastDigit - k >= 0) q.push(frontVal * 10 + lastDigit - k);
            }
        }
        while(!q.empty()){
            result.push_back(q.front());
            q.pop();
        }
    }
public:
    vector<int> numsSameConsecDiff(int n, int k) {
        vector<int> result;

        //for(int num = 1; num <= 9; num++) callDfs(num, n - 1, k, result);
        callBfs(n, k, result);
        return result;
    }
};