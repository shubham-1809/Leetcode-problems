class Solution {
    int approachOne(vector<int>& arr, int &k){
        unordered_map<int, int> hashMap;
        int size = arr.size();
        vector<int> freq;

        for(int ind = 0; ind < size; ind++) hashMap[arr[ind]]++;
        for(auto &it : hashMap) freq.push_back(it.second);
        sort(freq.begin(), freq.end());
        int len = freq.size();
        for(int ind = 0; ind < len; ind++){
            k -= freq[ind];
            if(k < 0) return len - ind;
        }
        return 0;
    }
    int approachTwo(vector<int>& arr, int &k){
        unordered_map<int, int> hashMap;
        int size = arr.size();
        priority_queue<int, vector<int>, greater<int>> pq;

        for(int ind = 0; ind < size; ind++) hashMap[arr[ind]]++;
        for(auto &it : hashMap) pq.push(it.second);
    
        while(!pq.empty()){
             k -= pq.top();
            if(k < 0) return pq.size();
            pq.pop();
        }
        return 0;
    }
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        //return approachOne(arr, k);
        return approachTwo(arr, k);
    }
};