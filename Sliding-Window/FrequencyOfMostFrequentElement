class Solution {
    int binarySearch(int &target, vector<long> &prefix, vector<int> &nums, int &k){
        int left = 0, right = target, mid, result;

        while(left <= right){
            mid = left + (right - left) / 2;
            long cntElements = target - mid + 1;
            long totSum = cntElements * nums[target];
            long currSum = prefix[target] - prefix[mid] + nums[mid];
            if(totSum - currSum > k) left = mid + 1;
            else{
                result = mid;
                right = mid - 1;
            }
        }
        return target - result + 1;
    }
    int betterSolution(vector<int>& nums, int &k){
        sort(nums.begin(), nums.end());
        int size = nums.size(), result = 0, freq;
        vector<long> prefix(size);
        prefix[0] = nums[0];

        for(int ind = 1; ind < size; ind++) prefix[ind] = prefix[ind - 1] + nums[ind];
        for(int ind = 0; ind < size; ind++){
            freq = binarySearch(ind, prefix, nums, k);
            result = max(result, freq);
        }
        return result;
    }
    int optimal(vector<int>& nums, int &k){
        sort(nums.begin(), nums.end());
        int size = nums.size(), left = 0, right = 0, result = 0;
        long currSum = 0;

        while(right < size){
            long target = nums[right];
            currSum += nums[right];
            if((right - left + 1) * target - currSum > k) currSum -= nums[left++];
            result = max(result, right++ - left + 1);
        }
        return result;
    }
public:
    int maxFrequency(vector<int>& nums, int k) {
        //return betterSolution(nums, k);
        return optimal(nums, k);
    }
};