class Solution {
    int approachOne(string &s, int &size){
        stack<char> st;
        int cnt = 0;

        for(int ind = 0; ind < size; ind++){
            if(s[ind] == '(') st.push(s[ind]);
            else{
                if(st.empty()) cnt++;
                else st.pop();
            }
        }
        return cnt + st.size();
    }
    int approachTwo(string &s, int &size){
        int cntOpenBraces = 0, cnt = 0;

        for(int ind = 0; ind < size; ind++){
            if(s[ind] == '(') cntOpenBraces++;
            else{
                if(cntOpenBraces == 0) cnt++;
                else cntOpenBraces--;
            }
        }
        return cnt + cntOpenBraces;        
    }
public:
    int minAddToMakeValid(string s) {
        int size = s.size();

        //return approachOne(s, size);
        return approachTwo(s, size);
    }
};