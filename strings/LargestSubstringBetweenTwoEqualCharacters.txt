class Solution {
    int bruteForce(string &s){
        int size = s.size(), result = -1;

        for(int ind1 = 0; ind1 < size - 1; ind1++){
            for(int ind2 = ind1 + 1; ind2 < size; ind2++){
                if(s[ind1] == s[ind2]) result = max(result, ind2 - ind1 - 1);
            }
        }
        return result;
    }
    int betterOne(string &s){
        int size = s.size(), result = -1;
        unordered_map<char, int> hashMap;

        for(int ind = 0; ind < size; ind++){
            char ch = s[ind];
            if(hashMap.find(ch) == hashMap.end()) hashMap[ch] = ind;
            else result = max(result, ind - hashMap[ch] - 1);
        }
        return result;
    }
    int optimal(string &s){
        int size = s.size(), result = -1;
        vector<int> freq(26, -1);

        for(int ind = 0; ind < size; ind++){
            char ch = s[ind];
            if(freq[ch - 'a'] == -1) freq[ch - 'a'] = ind;
            else result = max(result, ind - freq[ch - 'a'] - 1);
        }
        return result;
    }
public:
    int maxLengthBetweenEqualCharacters(string s) {
        //return bruteForce(s);
        //return better(s);
        return optimal(s);
    }
};